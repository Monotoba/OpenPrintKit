from __future__ import annotations
from pathlib import Path
from typing import Dict, Any
from ...core import schema as S
from ...core.gcode import render_hooks_with_firmware


def _ensure_dir(p: Path) -> None:
    p.mkdir(parents=True, exist_ok=True)


def _dump_json(obj: Dict[str, Any], path: Path) -> None:
    import json
    _ensure_dir(path.parent)
    path.write_text(json.dumps(obj, indent=2), encoding='utf-8')


def generate_orca(pdl: Dict[str, Any], out_dir: Path) -> Dict[str, Path]:
    """Generate minimal OPK profiles (printer/filament/process) from PDL suitable for orca bundling."""
    out: Dict[str, Path] = {}
    name = pdl.get('name') or 'OPK Printer'
    geom = pdl.get('geometry') or {}
    bed = geom.get('bed_shape') or [[0,0],[200,0],[200,200],[0,200]]
    z = geom.get('z_height') or 200
    xs = [p[0] for p in bed]; ys = [p[1] for p in bed]
    w = max(xs) - min(xs); d = max(ys) - min(ys)
    ex0 = (pdl.get('extruders') or [{}])[0]
    nozzle = ex0.get('nozzle_diameter') or 0.4
    # PRINTER
    printer = {
        'type': 'printer',
        'name': str(name),
        'firmware': str(pdl.get('firmware') or 'marlin'),
        'kinematics': str(pdl.get('kinematics') or 'cartesian'),
        'nozzle_diameter': float(nozzle),
        'filament_diameter': float((pdl.get('materials') or [{}])[0].get('filament_diameter') or 1.75),
        'build_volume': [float(w), float(d), float(z)],
        'comments': 'Generated by OPK from PDL'
    }
    S.validate('printer', printer)
    ppath = out_dir / 'printers' / f"{name}_Printer.json"
    _dump_json(printer, ppath)
    out['printer'] = ppath
    # FILAMENT
    mat = (pdl.get('materials') or [{}])[0]
    filament = {
        'type': 'filament',
        'name': mat.get('name') or 'Generic PLA',
        'filament_type': mat.get('filament_type') or 'PLA',
        'nozzle_temperature': float(mat.get('nozzle_temperature') or 205),
        'bed_temperature': float(mat.get('bed_temperature') or 60),
        'fan_speed': float(mat.get('fan_speed') or 100)
    }
    S.validate('filament', filament)
    fpath = out_dir / 'filaments' / f"{filament['name'].replace(' ','_')}.json"
    _dump_json(filament, fpath)
    out['filament'] = fpath
    # PROCESS
    process = {
        'type': 'process',
        'name': 'Standard 0.20mm',
        'layer_height': 0.2,
        'first_layer_height': 0.28,
        'print_speed': 60,
    }
    S.validate('process', process)
    rpath = out_dir / 'processes' / f"{process['name'].replace(' ','_')}.json"
    _dump_json(process, rpath)
    out['process'] = rpath
    return out

